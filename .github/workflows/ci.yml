name: CI & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-release to analyze history and for fetching tags

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      # Debug: Show package.json content *after* semantic-release potentially modified it locally
      - name: Show package.json after semantic-release step
        run: |
          echo "Content of package.json after semantic-release command:"
          cat package.json || echo "package.json not found"

      - name: Get released version from Git tag
        id: get_tag_version
        run: |
          git fetch --tags --force # Ensure all tags are fetched
          LATEST_SEMVER_TAG=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_SEMVER_TAG" ]; then
            echo "Error: No semantic version tag (vX.Y.Z) found after semantic-release."
            # Fallback to any latest tag if no semver tag is found (less ideal)
            LATEST_SEMVER_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            if [ -z "$LATEST_SEMVER_TAG" ]; then
                echo "Error: No tags found at all!"
                exit 1
            fi
            echo "Warning: Using latest tag as fallback: $LATEST_SEMVER_TAG (this might not be a simple vX.Y.Z tag)"
          fi
          # Remove 'v' prefix if it exists
          VERSION_FROM_TAG=$(echo "$LATEST_SEMVER_TAG" | sed 's/^v//')
          echo "Extracted version from tag $LATEST_SEMVER_TAG is $VERSION_FROM_TAG"
          echo "tag_version=$VERSION_FROM_TAG" >> $GITHUB_OUTPUT

      - name: Sync package.json to released version
        run: |
          TAG_VERSION="${{ steps.get_tag_version.outputs.tag_version }}"
          if [ -z "$TAG_VERSION" ]; then
            echo "Error: Version from tag is empty. Skipping package.json sync."
            exit 1
          fi
          CURRENT_PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Current package.json version (before sync): $CURRENT_PKG_VERSION"
          echo "Tagged release version: $TAG_VERSION"

          if [ "$CURRENT_PKG_VERSION" != "$TAG_VERSION" ]; then
            echo "Updating package.json from $CURRENT_PKG_VERSION to $TAG_VERSION"
            npm version --new-version "$TAG_VERSION" --no-git-tag-version --allow-same-version
            echo "package.json version updated to $TAG_VERSION by npm version."
          else
            echo "package.json version ($CURRENT_PKG_VERSION) is already synced with tagged version ($TAG_VERSION)."
          fi
          echo "Content of package.json after sync attempt:"
          cat package.json

      - name: Update version in UI with released version
        run: |
          RELEASED_VERSION="${{ steps.get_tag_version.outputs.tag_version }}"
          if [ -z "$RELEASED_VERSION" ]; then
            echo "Error: Released version from tag is empty. Cannot update UI."
            exit 1
          fi
          echo "Using released version for UI update: $RELEASED_VERSION"
          sed "s/Version [0-9]\+\.[0-9]\+\.[0-9][0-9a-zA-Z.-]* <br \/>/Version $RELEASED_VERSION <br \/>/" src/components/DatasetSelection.tsx > src/components/DatasetSelection.tsx.tmp
          mv src/components/DatasetSelection.tsx.tmp src/components/DatasetSelection.tsx
          echo "Content of src/components/DatasetSelection.tsx after update:"
          cat src/components/DatasetSelection.tsx

      - name: Commit and push package.json and UI version update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Add both package.json and the UI file
          git add package.json src/components/DatasetSelection.tsx
          # Check if there are changes to commit to prevent empty commits
          if git diff --staged --quiet; then
            echo "No changes to UI version or package.json to commit."
          else
            git commit -m "chore(release): sync UI and package.json to released version ${{ steps.get_tag_version.outputs.tag_version }} [skip ci]"
            # This push updates the main branch with package.json and UI reflecting the tagged version.
            git push
            echo "Committed and pushed synchronized UI and package.json for version ${{ steps.get_tag_version.outputs.tag_version }}."
          fi

  build_and_deploy:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      # This checkout will now get the main branch which includes the commit from the release job
      # that synchronized package.json and the UI to the released version.

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Compile TypeScript
      run: npx tsc

    - name: Build Vite application
      run: npx vite build

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4